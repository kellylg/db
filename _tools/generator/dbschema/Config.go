//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type Config struct {
	trans	*factory.Transaction
	objects []*Config
	
	Id     	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"主键ID" json:"id" xml:"id"`
	Key    	string  	`db:"key" bson:"key" comment:"配置项" json:"key" xml:"key"`
	Val    	string  	`db:"val" bson:"val" comment:"配置值" json:"val" xml:"val"`
	Updated	uint    	`db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
}

func (this *Config) Trans() *factory.Transaction {
	return this.trans
}

func (this *Config) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *Config) Objects() []*Config {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *Config) NewObjects() *[]*Config {
	this.objects = []*Config{}
	return &this.objects
}

func (this *Config) Param() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("config").SetModel(this)
}

func (this *Config) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *Config) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Config) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Config) Add() (pk interface{}, err error) {
	this.Id = 0
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		}
	}
	return
}

func (this *Config) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *Config) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		this.Updated = uint(time.Now().Unix())
	},func(){
		this.Id = 0
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint); y {
			this.Id = v
		}
	}
	return 
}

func (this *Config) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetMiddleware(mw).Delete()
}

