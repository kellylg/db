//Generated by webx-top/db
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type User struct {
	trans	*factory.Transaction
	
	Id             	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"UID" json:"id" xml:"id"`
	Uname          	string  	`db:"uname" bson:"uname" comment:"用户名" json:"uname" xml:"uname"`
	Passwd         	string  	`db:"passwd" bson:"passwd" comment:"密码" json:"passwd" xml:"passwd"`
	Salt           	string  	`db:"salt" bson:"salt" comment:"盐值" json:"salt" xml:"salt"`
	Email          	string  	`db:"email" bson:"email" comment:"邮箱" json:"email" xml:"email"`
	Mobile         	string  	`db:"mobile" bson:"mobile" comment:"手机号" json:"mobile" xml:"mobile"`
	LoginTime      	uint    	`db:"login_time" bson:"login_time" comment:"上次登录时间" json:"login_time" xml:"login_time"`
	LoginIp        	string  	`db:"login_ip" bson:"login_ip" comment:"上次登录IP" json:"login_ip" xml:"login_ip"`
	Created        	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated        	uint    	`db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	Active         	string  	`db:"active" bson:"active" comment:"激活" json:"active" xml:"active"`
	Avatar         	string  	`db:"avatar" bson:"avatar" comment:"头像" json:"avatar" xml:"avatar"`
}

func (this *User) Trans() *factory.Transaction {
	return this.trans
}

func (this *User) Use(trans *factory.Transaction) *User {
	this.trans = trans
	return this
}

func (this *User) Param() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("user")
}

func (this *User) Get(mw func(db.Result) db.Result) error {
	return this.Param().SetRecv(this).SetMiddleware(mw).One()
}

func (this *User) List(mw func(db.Result) db.Result, page, size int) ([]*User, func() int64, error) {
	r := []*User{}
	counter, err := this.Param().SetPage(page).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *User) ListByOffset(mw func(db.Result) db.Result, offset, size int) ([]*User, func() int64, error) {
	r := []*User{}
	counter, err := this.Param().SetOffset(offset).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *User) Add() (interface{}, error) {
	this.Created = uint(time.Now().Unix())
	return this.Param().SetSend(this).Insert()
}

func (this *User) Edit(mw func(db.Result) db.Result) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetSend(this).SetMiddleware(mw).Update()
}

func (this *User) Delete(mw func(db.Result) db.Result) error {
	
	return this.Param().SetMiddleware(mw).Delete()
}

