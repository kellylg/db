//Generated by webx-top/db
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
)

type User struct {
	trans	*factory.Transaction
	
	Id             	int     	`db:"id,omitempty" comment:"UID"`
	Uname          	string  	`db:"uname" comment:"用户名"`
	Passwd         	string  	`db:"passwd" comment:"密码"`
	Salt           	string  	`db:"salt" comment:"盐值"`
	Email          	string  	`db:"email" comment:"邮箱"`
	Mobile         	string  	`db:"mobile" comment:"手机号"`
	LoginTime      	int     	`db:"login_time" comment:"上次登录时间"`
	LoginIp        	string  	`db:"login_ip" comment:"上次登录IP"`
	Created        	int     	`db:"created" comment:"创建时间"`
	Updated        	int     	`db:"updated" comment:"更新时间"`
	Active         	string  	`db:"active" comment:"激活"`
	Avatar         	string  	`db:"avatar" comment:"头像"`
}

func (this *User) SetTrans(trans *factory.Transaction) *User {
	this.trans = trans
	return this
}

func (this *User) Param() *factory.Param {
	return factory.NewParam(Factory).SetTrans(this.trans).SetCollection("user")
}

func (this *User) Get(mw func(db.Result) db.Result) error {
	return this.Param().SetRecv(this).SetMiddleware(mw).One()
}

func (this *User) List(mw func(db.Result) db.Result, page, size int) ([]*User, func() int64, error) {
	r := []*User{}
	counter, err := this.Param().SetPage(page).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *User) ListByOffset(mw func(db.Result) db.Result, offset, size int) ([]*User, func() int64, error) {
	r := []*User{}
	counter, err := this.Param().SetOffset(offset).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *User) Add(args ...*User) (interface{}, error) {
	var data = this
	if len(args)>0 {
		data = args[0]
	}
	return this.Param().SetSend(data).Insert()
}

func (this *User) Edit(mw func(db.Result) db.Result, args ...*User) error {
	var data = this
	if len(args)>0 {
		data = args[0]
	}
	return this.Param().SetSend(data).SetMiddleware(mw).Update()
}

func (this *User) Delete(mw func(db.Result) db.Result) error {
	return this.Param().SetMiddleware(mw).Delete()
}

