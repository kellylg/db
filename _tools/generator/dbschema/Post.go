//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type Post struct {
	trans	*factory.Transaction
	objects []*Post
	
	Id           	uint    	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"ID" json:"id" xml:"id"`
	Title        	string  	`db:"title" bson:"title" comment:"标题" json:"title" xml:"title"`
	Description  	string  	`db:"description" bson:"description" comment:"简介" json:"description" xml:"description"`
	Content      	string  	`db:"content" bson:"content" comment:"内容" json:"content" xml:"content"`
	Etype        	string  	`db:"etype" bson:"etype" comment:"编辑器类型" json:"etype" xml:"etype"`
	Created      	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated      	uint    	`db:"updated" bson:"updated" comment:"修改时间" json:"updated" xml:"updated"`
	Display      	string  	`db:"display" bson:"display" comment:"显示" json:"display" xml:"display"`
	Uid          	uint    	`db:"uid" bson:"uid" comment:"UID" json:"uid" xml:"uid"`
	Uname        	string  	`db:"uname" bson:"uname" comment:"作者名" json:"uname" xml:"uname"`
	Passwd       	string  	`db:"passwd" bson:"passwd" comment:"访问密码" json:"passwd" xml:"passwd"`
	Views        	uint    	`db:"views" bson:"views" comment:"被浏览次数" json:"views" xml:"views"`
	Comments     	uint    	`db:"comments" bson:"comments" comment:"被评论次数" json:"comments" xml:"comments"`
	Likes        	uint    	`db:"likes" bson:"likes" comment:"被喜欢次数" json:"likes" xml:"likes"`
	Deleted      	uint    	`db:"deleted" bson:"deleted" comment:"被删除时间" json:"deleted" xml:"deleted"`
	Year         	uint    	`db:"year" bson:"year" comment:"归档年份" json:"year" xml:"year"`
	Month        	string  	`db:"month" bson:"month" comment:"归档月份" json:"month" xml:"month"`
	AllowComment 	string  	`db:"allow_comment" bson:"allow_comment" comment:"是否允许评论" json:"allow_comment" xml:"allow_comment"`
	Tags         	string  	`db:"tags" bson:"tags" comment:"标签" json:"tags" xml:"tags"`
	Catid        	uint    	`db:"catid" bson:"catid" comment:"分类ID" json:"catid" xml:"catid"`
}

func (this *Post) Trans() *factory.Transaction {
	return this.trans
}

func (this *Post) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *Post) Objects() []*Post {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *Post) NewObjects() *[]*Post {
	this.objects = []*Post{}
	return &this.objects
}

func (this *Post) Param() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("post").SetModel(this)
}

func (this *Post) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *Post) List(recv interface{},mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Post) ListByOffset(recv interface{},mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Post) Add() (interface{}, error) {
	this.Created = uint(time.Now().Unix())
	return this.Param().SetSend(this).Insert()
}

func (this *Post) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *Post) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetMiddleware(mw).Delete()
}

