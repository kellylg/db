//Do not edit this file, which is automatically generated by the generator.
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type Comment struct {
	param   *factory.Param
	trans	*factory.Transaction
	objects []*Comment
	
	Id           	uint64  	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"主键" json:"id" xml:"id"`
	Content      	string  	`db:"content" bson:"content" comment:"内容" json:"content" xml:"content"`
	Quote        	string  	`db:"quote" bson:"quote" comment:"引用内容" json:"quote" xml:"quote"`
	Etype        	string  	`db:"etype" bson:"etype" comment:"编辑器类型" json:"etype" xml:"etype"`
	RootId       	uint64  	`db:"root_id" bson:"root_id" comment:"" json:"root_id" xml:"root_id"`
	RId          	uint64  	`db:"r_id" bson:"r_id" comment:"关联本表的id" json:"r_id" xml:"r_id"`
	RType        	string  	`db:"r_type" bson:"r_type" comment:"关联类型（reply-回复，append-追加）" json:"r_type" xml:"r_type"`
	RelatedTimes 	uint    	`db:"related_times" bson:"related_times" comment:"本身被回复次数" json:"related_times" xml:"related_times"`
	RootTimes    	uint    	`db:"root_times" bson:"root_times" comment:"根节点下的所有回复次数" json:"root_times" xml:"root_times"`
	Uid          	uint64  	`db:"uid" bson:"uid" comment:"发布者id" json:"uid" xml:"uid"`
	Uname        	string  	`db:"uname" bson:"uname" comment:"发布者用户名" json:"uname" xml:"uname"`
	Up           	uint64  	`db:"up" bson:"up" comment:"被顶次数" json:"up" xml:"up"`
	Down         	uint64  	`db:"down" bson:"down" comment:"被踩次数" json:"down" xml:"down"`
	Created      	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated      	uint    	`db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	Status       	int     	`db:"status" bson:"status" comment:"状态" json:"status" xml:"status"`
	RcId         	uint64  	`db:"rc_id" bson:"rc_id" comment:"关联内容ID" json:"rc_id" xml:"rc_id"`
	RcType       	string  	`db:"rc_type" bson:"rc_type" comment:"关联内容类型" json:"rc_type" xml:"rc_type"`
	ForUname     	string  	`db:"for_uname" bson:"for_uname" comment:"被评人用户名" json:"for_uname" xml:"for_uname"`
	ForUid       	uint64  	`db:"for_uid" bson:"for_uid" comment:"被评人id" json:"for_uid" xml:"for_uid"`
}

func (this *Comment) Trans() *factory.Transaction {
	return this.trans
}

func (this *Comment) Use(trans *factory.Transaction) factory.Model {
	this.trans = trans
	return this
}

func (this *Comment) Objects() []*Comment {
	if this.objects == nil {
		return nil
	}
	return this.objects[:]
}

func (this *Comment) NewObjects() *[]*Comment {
	this.objects = []*Comment{}
	return &this.objects
}

func (this *Comment) NewParam() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("comment").SetModel(this)
}

func (this *Comment) SetParam(param *factory.Param) factory.Model {
	this.param = param
	return this
}

func (this *Comment) Param() *factory.Param {
	if this.param == nil {
		return this.NewParam()
	}
	return this.param
}

func (this *Comment) Get(mw func(db.Result) db.Result, args ...interface{}) error {
	return this.Param().SetArgs(args...).SetRecv(this).SetMiddleware(mw).One()
}

func (this *Comment) List(recv interface{}, mw func(db.Result) db.Result, page, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetPage(page).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Comment) ListByOffset(recv interface{}, mw func(db.Result) db.Result, offset, size int, args ...interface{}) (func() int64, error) {
	if recv == nil {
		recv = this.NewObjects()
	}
	return this.Param().SetArgs(args...).SetOffset(offset).SetSize(size).SetRecv(recv).SetMiddleware(mw).List()
}

func (this *Comment) Add() (pk interface{}, err error) {
	this.Created = uint(time.Now().Unix())
	this.Id = 0
	pk, err = this.Param().SetSend(this).Insert()
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint64(v)
		}
	}
	return
}

func (this *Comment) Edit(mw func(db.Result) db.Result, args ...interface{}) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Update()
}

func (this *Comment) Upsert(mw func(db.Result) db.Result, args ...interface{}) (pk interface{}, err error) {
	pk, err = this.Param().SetArgs(args...).SetSend(this).SetMiddleware(mw).Upsert(func(){
		this.Updated = uint(time.Now().Unix())
	},func(){
		this.Created = uint(time.Now().Unix())
	this.Id = 0
	})
	if err == nil && pk != nil {
		if v, y := pk.(uint64); y {
			this.Id = v
		} else if v, y := pk.(int64); y {
			this.Id = uint64(v)
		}
	}
	return 
}

func (this *Comment) Delete(mw func(db.Result) db.Result, args ...interface{}) error {
	
	return this.Param().SetArgs(args...).SetMiddleware(mw).Delete()
}

