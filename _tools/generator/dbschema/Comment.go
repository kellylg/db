//Generated by webx-top/db
package dbschema

import (
	"github.com/webx-top/db"
	"github.com/webx-top/db/lib/factory"
	
	"time"
)

type Comment struct {
	trans	*factory.Transaction
	
	Id                     	uint64  	`db:"id,omitempty,pk" bson:"id,omitempty" comment:"主键" json:"id" xml:"id"`
	Content                	string  	`db:"content" bson:"content" comment:"内容" json:"content" xml:"content"`
	Quote                  	string  	`db:"quote" bson:"quote" comment:"引用内容" json:"quote" xml:"quote"`
	Etype                  	string  	`db:"etype" bson:"etype" comment:"编辑器类型" json:"etype" xml:"etype"`
	RootId                 	uint64  	`db:"root_id" bson:"root_id" comment:"" json:"root_id" xml:"root_id"`
	RId                    	uint64  	`db:"r_id" bson:"r_id" comment:"关联本表的id" json:"r_id" xml:"r_id"`
	RType                  	string  	`db:"r_type" bson:"r_type" comment:"关联类型（reply-回复，append-追加）" json:"r_type" xml:"r_type"`
	RelatedTimes           	uint    	`db:"related_times" bson:"related_times" comment:"本身被回复次数" json:"related_times" xml:"related_times"`
	RootTimes              	uint    	`db:"root_times" bson:"root_times" comment:"根节点下的所有回复次数" json:"root_times" xml:"root_times"`
	Uid                    	uint64  	`db:"uid" bson:"uid" comment:"发布者id" json:"uid" xml:"uid"`
	Uname                  	string  	`db:"uname" bson:"uname" comment:"发布者用户名" json:"uname" xml:"uname"`
	Up                     	uint64  	`db:"up" bson:"up" comment:"被顶次数" json:"up" xml:"up"`
	Down                   	uint64  	`db:"down" bson:"down" comment:"被踩次数" json:"down" xml:"down"`
	Created                	uint    	`db:"created" bson:"created" comment:"创建时间" json:"created" xml:"created"`
	Updated                	uint    	`db:"updated" bson:"updated" comment:"更新时间" json:"updated" xml:"updated"`
	Status                 	int     	`db:"status" bson:"status" comment:"状态" json:"status" xml:"status"`
	RcId                   	uint64  	`db:"rc_id" bson:"rc_id" comment:"关联内容ID" json:"rc_id" xml:"rc_id"`
	RcType                 	string  	`db:"rc_type" bson:"rc_type" comment:"关联内容类型" json:"rc_type" xml:"rc_type"`
	ForUname               	string  	`db:"for_uname" bson:"for_uname" comment:"被评人用户名" json:"for_uname" xml:"for_uname"`
	ForUid                 	uint64  	`db:"for_uid" bson:"for_uid" comment:"被评人id" json:"for_uid" xml:"for_uid"`
}

func (this *Comment) Trans() *factory.Transaction {
	return this.trans
}

func (this *Comment) Use(trans *factory.Transaction) *Comment {
	this.trans = trans
	return this
}

func (this *Comment) Param() *factory.Param {
	return factory.NewParam(factory.DefaultFactory).SetTrans(this.trans).SetCollection("comment")
}

func (this *Comment) Get(mw func(db.Result) db.Result) error {
	return this.Param().SetRecv(this).SetMiddleware(mw).One()
}

func (this *Comment) List(mw func(db.Result) db.Result, page, size int) ([]*Comment, func() int64, error) {
	r := []*Comment{}
	counter, err := this.Param().SetPage(page).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *Comment) ListByOffset(mw func(db.Result) db.Result, offset, size int) ([]*Comment, func() int64, error) {
	r := []*Comment{}
	counter, err := this.Param().SetOffset(offset).SetSize(size).SetRecv(&r).SetMiddleware(mw).List()
	return r, counter, err
}

func (this *Comment) Add() (interface{}, error) {
	this.Created = uint(time.Now().Unix())
	return this.Param().SetSend(this).Insert()
}

func (this *Comment) Edit(mw func(db.Result) db.Result) error {
	this.Updated = uint(time.Now().Unix())
	return this.Param().SetSend(this).SetMiddleware(mw).Update()
}

func (this *Comment) Delete(mw func(db.Result) db.Result) error {
	
	return this.Param().SetMiddleware(mw).Delete()
}

